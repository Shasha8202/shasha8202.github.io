---
layout : single 
title : 공공데이터를 활용한 전력수요 및 SMP 예측 
--- 


# 2위 최정명님 Code 따라서 해보기
***

## 개요 
--- 

* 목적 : 제주지역 일주일 후 28일동안 일별 전력수요량 및 SMP 예측 
> 일별 전력수급실적 1개값
> 일별 SMP 3개 값 (가중평균값, 최고, 최저)

* 주의사항    
> 예측 모델은 Input 값으로 고유기상속성을 최소 1개이상, 최대 5개 이하   
> (SMP, 전력수급실적은 갯수 제한 받지 않음) 

* 제공 Dataset
> 시간별 기상 Data (weather_v1.csv, weather_v2.csv)      
> 일자별 전력수급실적 (target_v1.csv, target_v2.csv)     
> 기간 : 2018-02-01 ~ 2020-01-31 / 2018-02-01 ~ 2020-05-18      

# 1. Library & Data

#### 외부 데이터
- SMP, supply, 기온 데이터들을 2010년 부터 2020년의 데이터를 수집하여 2020-05-18 까지의 데이터만 사용하였습니다.
- SMP(제주) 일별 데이터 [2010-01-01 ~ 2020-05-18] :  https://www.kpx.or.kr/www/contents.do?key=226
- supply(제주) 일별 데이터 [2010-01-01 ~ 2020-05-18] :   https://www.kpx.or.kr/www/contents.do?key=356
- 기온(제주) 일별 데이터(평균, 최저, 최고) [2010-01-01~2020-05-18] : https://data.kma.go.kr/data/grnd/selectAsosRltmList.do?pgmNo=36
- 외부 데이터를 다운로드 받는 시점에 따라 추가적으로 데이터가 더 생기기 때문에 2020-05-18 까지의 데이터만 슬라이싱 하는 과정이 달라 질 수 있음.



```python
import warnings
warnings.filterwarnings('ignore')

import pandas as pd 
import numpy as np 
import seaborn as sns 
import matplotlib.pyplot as plt 
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
import glob
from tqdm.notebook import tqdm

smp_files = glob.glob('data/smp/*')
supply_files = glob.glob('data/supply/*')
weather_files=glob.glob('data/weather/*')
```

# 2. Data preprocessing
## smp   
   
   * SMP 일별 Data 합쳐주고, 날짜/최소/최대/평균 Data & 기간 20년도 1월부터 5월 18일까지 생성 


```python
smp_dfs = []
for i in range (len(smp_files)):
    tmp = pd.read_csv(smp_files[i]).iloc[:][['구분','최소','최대','평균']] # 하나하나 지울 필요 없이 skiprows=3 명령어 사용하면 위에 3줄까지는 무시하고 다음 행부터 불러옴 
    tmp['구분'] = pd.to_datetime(tmp['구분'].astype(str))
    smp_dfs.append(tmp)

smp_df = pd.concat(smp_dfs, ignore_index=True)
smp_df
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>구분</th>
      <th>최소</th>
      <th>최대</th>
      <th>평균</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2010-01-01</td>
      <td>146.94</td>
      <td>174.02</td>
      <td>157.70</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2010-01-02</td>
      <td>147.44</td>
      <td>159.51</td>
      <td>153.33</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2010-01-03</td>
      <td>148.40</td>
      <td>176.15</td>
      <td>158.78</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2010-01-04</td>
      <td>150.18</td>
      <td>168.55</td>
      <td>161.65</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2010-01-05</td>
      <td>155.30</td>
      <td>290.69</td>
      <td>169.82</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>4013</th>
      <td>2020-12-27</td>
      <td>68.81</td>
      <td>97.95</td>
      <td>74.01</td>
    </tr>
    <tr>
      <th>4014</th>
      <td>2020-12-28</td>
      <td>69.76</td>
      <td>96.01</td>
      <td>76.83</td>
    </tr>
    <tr>
      <th>4015</th>
      <td>2020-12-29</td>
      <td>69.73</td>
      <td>92.92</td>
      <td>74.96</td>
    </tr>
    <tr>
      <th>4016</th>
      <td>2020-12-30</td>
      <td>63.18</td>
      <td>71.95</td>
      <td>69.73</td>
    </tr>
    <tr>
      <th>4017</th>
      <td>2020-12-31</td>
      <td>69.66</td>
      <td>99.75</td>
      <td>76.42</td>
    </tr>
  </tbody>
</table>
<p>4018 rows × 4 columns</p>
</div>




```python
_row = (smp_df['구분'] >= '2010-01-01') & (smp_df['구분'] <= '2020-05-18')
smp_df = smp_df.loc[_row,:]
smp_df = smp_df.reset_index(drop=True)
smp_df.rename(columns={"구분": "일시"},inplace=True)
```


```python
smp_df
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>일시</th>
      <th>최소</th>
      <th>최대</th>
      <th>평균</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2010-01-01</td>
      <td>146.94</td>
      <td>174.02</td>
      <td>157.70</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2010-01-02</td>
      <td>147.44</td>
      <td>159.51</td>
      <td>153.33</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2010-01-03</td>
      <td>148.40</td>
      <td>176.15</td>
      <td>158.78</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2010-01-04</td>
      <td>150.18</td>
      <td>168.55</td>
      <td>161.65</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2010-01-05</td>
      <td>155.30</td>
      <td>290.69</td>
      <td>169.82</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>3786</th>
      <td>2020-05-14</td>
      <td>66.78</td>
      <td>193.28</td>
      <td>100.46</td>
    </tr>
    <tr>
      <th>3787</th>
      <td>2020-05-15</td>
      <td>61.81</td>
      <td>198.23</td>
      <td>102.38</td>
    </tr>
    <tr>
      <th>3788</th>
      <td>2020-05-16</td>
      <td>88.50</td>
      <td>220.91</td>
      <td>121.19</td>
    </tr>
    <tr>
      <th>3789</th>
      <td>2020-05-17</td>
      <td>65.78</td>
      <td>207.75</td>
      <td>116.82</td>
    </tr>
    <tr>
      <th>3790</th>
      <td>2020-05-18</td>
      <td>66.86</td>
      <td>113.31</td>
      <td>98.98</td>
    </tr>
  </tbody>
</table>
<p>3791 rows × 4 columns</p>
</div>



## Supply

* 일별 설비용량(MW), 공급능력(MW), 최대전력(전년,금년,증가율, MW, %), 공급예비력(MW), 예비율(%) 
* 설비용량   
> 전력계통에 연결되어 운전되고 있는 발전소의 발전단 전력의 합계 또는 시설용량의 합계를 말한다. 전력설비 중 전력계통과 연결되지 않는 자가용 발전설비나 계통에 연결되어 있어도 비상용 발전기와 같이 전기사업용이 아닌 소규모 발전설비 등은 계통설비용량에 포함되지 않는다
* 공급능력   
> 전력계통에서 공급능력은 최대수요전력 발생시에 안정되게 공급할 수 있는 최대의 발전가능 출력을 말하는데, 설비용량에서 정비 또는 고장에 의해 발전할 수 없는 양을 제외한 발전기별 공급가능용량의 합으로 표시된다.
* 최대전력   
> 어느 일정기간 동안의 1시간 평균전력이 최대인 전력수요 값을 말한다. 산정기간에 따라 일일, 일주간, 일개월, 연간최대전력수요 등으로 구분하며, 요일별, 계절별, 기후조건, 기타 전력소비의 형태 등에 따라 발생시간대가 다르다. 여름철 최대전력수요는 냉방기기의 가동이 많은 15시를 전후한 낮 시간에 주로 발생하며, 겨울철에는 21시를 전후로 한 야간시간대에 발생한다.
* 공급예비력   
> 발전설비의 총 설비용량 중에서 예측이 가능한 출력 감소분을 제외한 공급능력용량과 전력수요와의 차이를 말하며, 주로 당일의 수요예측 오차, 발전기의 고장, 계통주파수의 조정 및 기타 순시부하의 변동 등에 대하여 전력을 원활하게 공급할 수 있도록 하기 위하여 보유한다
* 공급예비율   
> 공급예비력을 최대수요(전력)로 나누어 백분율로 표시한 것을 말하며, 전력계통이 얼마나 여유를 갖고 있는지 나타내는 척도의 하나로 사용된다.


```python
supply_files
```




    ['data/supply\\supply_201001.xls',
     'data/supply\\supply_201002.xls',
     'data/supply\\supply_201003.xls',
     'data/supply\\supply_201004.xls',
     'data/supply\\supply_201005.xls',
     'data/supply\\supply_201006.xls',
     'data/supply\\supply_201007.xls',
     'data/supply\\supply_201008.xls',
     'data/supply\\supply_201009.xls',
     'data/supply\\supply_201010.xls',
     'data/supply\\supply_201011.xls',
     'data/supply\\supply_201012.xls',
     'data/supply\\supply_201101.xls',
     'data/supply\\supply_201102.xls',
     'data/supply\\supply_201103.xls',
     'data/supply\\supply_201104.xls',
     'data/supply\\supply_201105.xls',
     'data/supply\\supply_201106.xls',
     'data/supply\\supply_201107.xls',
     'data/supply\\supply_201108.xls',
     'data/supply\\supply_201109.xls',
     'data/supply\\supply_201110.xls',
     'data/supply\\supply_201111.xls',
     'data/supply\\supply_201112.xls',
     'data/supply\\supply_201201.xls',
     'data/supply\\supply_201202.xls',
     'data/supply\\supply_201203.xls',
     'data/supply\\supply_201204.xls',
     'data/supply\\supply_201205.xls',
     'data/supply\\supply_201206.xls',
     'data/supply\\supply_201207.xls',
     'data/supply\\supply_201208.xls',
     'data/supply\\supply_201209.xls',
     'data/supply\\supply_201210.xls',
     'data/supply\\supply_201211.xls',
     'data/supply\\supply_201212.xls',
     'data/supply\\supply_201301.xls',
     'data/supply\\supply_201302.xls',
     'data/supply\\supply_201303.xls',
     'data/supply\\supply_201304.xls',
     'data/supply\\supply_201305.xls',
     'data/supply\\supply_201306.xls',
     'data/supply\\supply_201307.xls',
     'data/supply\\supply_201308.xls',
     'data/supply\\supply_201309.xls',
     'data/supply\\supply_201310.xls',
     'data/supply\\supply_201311.xls',
     'data/supply\\supply_201312.xls',
     'data/supply\\supply_201401.xls',
     'data/supply\\supply_201402.xls',
     'data/supply\\supply_201403.xls',
     'data/supply\\supply_201404.xls',
     'data/supply\\supply_201405.xls',
     'data/supply\\supply_201406.xls',
     'data/supply\\supply_201407.xls',
     'data/supply\\supply_201408.xls',
     'data/supply\\supply_201409.xls',
     'data/supply\\supply_201410.xls',
     'data/supply\\supply_201411.xls',
     'data/supply\\supply_201412.xls',
     'data/supply\\supply_201501.xls',
     'data/supply\\supply_201502.xls',
     'data/supply\\supply_201503.xls',
     'data/supply\\supply_201504.xls',
     'data/supply\\supply_201505.xls',
     'data/supply\\supply_201506.xls',
     'data/supply\\supply_201507.xls',
     'data/supply\\supply_201508.xls',
     'data/supply\\supply_201509.xls',
     'data/supply\\supply_201510.xls',
     'data/supply\\supply_201511.xls',
     'data/supply\\supply_201512.xls',
     'data/supply\\supply_201601.xls',
     'data/supply\\supply_201602.xls',
     'data/supply\\supply_201603.xls',
     'data/supply\\supply_201604.xls',
     'data/supply\\supply_201605.xls',
     'data/supply\\supply_201606.xls',
     'data/supply\\supply_201607.xls',
     'data/supply\\supply_201608.xls',
     'data/supply\\supply_201609.xls',
     'data/supply\\supply_201610.xls',
     'data/supply\\supply_201611.xls',
     'data/supply\\supply_201612.xls',
     'data/supply\\supply_201701.xls',
     'data/supply\\supply_201702.xls',
     'data/supply\\supply_201703.xls',
     'data/supply\\supply_201704.xls',
     'data/supply\\supply_201705.xls',
     'data/supply\\supply_201706.xls',
     'data/supply\\supply_201707.xls',
     'data/supply\\supply_201708.xls',
     'data/supply\\supply_201709.xls',
     'data/supply\\supply_201710.xls',
     'data/supply\\supply_201711.xls',
     'data/supply\\supply_201712.xls',
     'data/supply\\supply_201801.xls',
     'data/supply\\supply_201802.xls',
     'data/supply\\supply_201803.xls',
     'data/supply\\supply_201804.xls',
     'data/supply\\supply_201805.xls',
     'data/supply\\supply_201806.xls',
     'data/supply\\supply_201807.xls',
     'data/supply\\supply_201808.xls',
     'data/supply\\supply_201809.xls',
     'data/supply\\supply_201810.xls',
     'data/supply\\supply_201811.xls',
     'data/supply\\supply_201812.xls',
     'data/supply\\supply_201901.xls',
     'data/supply\\supply_201902.xls',
     'data/supply\\supply_201903.xls',
     'data/supply\\supply_201904.xls',
     'data/supply\\supply_201905.xls',
     'data/supply\\supply_201906.xls',
     'data/supply\\supply_201907.xls',
     'data/supply\\supply_201908.xls',
     'data/supply\\supply_201909.xls',
     'data/supply\\supply_201910.xls',
     'data/supply\\supply_201911.xls',
     'data/supply\\supply_201912.xls',
     'data/supply\\supply_202001.xls',
     'data/supply\\supply_202002.xls',
     'data/supply\\supply_202003.xls',
     'data/supply\\supply_202004.xls',
     'data/supply\\supply_202005.xls']




```python
supply_dfs = []
for file in supply_files: 
    tmp = pd.read_excel(file).iloc[1:,1:]
    tmp.columns=['일시','설비용량','공급능력','전년최대전력','금년최대전력','증가율','공급예비력','예비율']
    tmp['설비용량'] = tmp['설비용량'].astype(np.float32)
    tmp['공급능력'] = tmp['공급능력'].astype(np.float32)
    tmp['공급능력'] = tmp['전년최대전력'].astype(np.float32)
    tmp['공급능력'] = tmp['금년최대전력'].astype(np.float32)
    tmp['공급능력'] = tmp['증가율'].astype(np.float32)
    tmp['공급능력'] = tmp['공급예비력'].astype(np.float32)
    tmp['공급능력'] = tmp['예비율'].astype(np.float32)   
    tmp.iloc[::-1]
    supply_dfs.append(tmp)    
    # float 와 np,float32 차이점은?

supply_df = pd.concat(supply_dfs)
supply_df = supply_df.sort_values('일시',ascending=True, ignore_index=True)
```

* Datetime 형식 변경 
* 일시에서 '연월일'만 남기고 시분초 Data는 제외하기 


```python
supply_df[['일','시']] = supply_df['일시'].str.split(expand=True)
supply_df['일시'] = (pd.to_datetime(supply_df.pop('일'), format='%Y/%m/%d')) #+ pd.to_timedelta(supply_df.pop('시') + ':00'))
```


```python
supply_df.drop(['시'],axis=1, inplace=True)
```



* 결측치 확인


```python
supply_df.isnull().sum().sum()
```




    0




```python
start = '2010-01-01'
end = '2020-05-18'
```


```python
start_end = (supply_df['일시']>=start) & (supply_df['일시']<=end)
```


```python
supply_df = supply_df[start_end]
```


```python
supply_df
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>일시</th>
      <th>설비용량</th>
      <th>공급능력</th>
      <th>전년최대전력</th>
      <th>금년최대전력</th>
      <th>증가율</th>
      <th>공급예비력</th>
      <th>예비율</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2010-01-01</td>
      <td>82.129997</td>
      <td>38.900002</td>
      <td>49.2</td>
      <td>51</td>
      <td>3</td>
      <td>20.00</td>
      <td>38.90</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2010-01-02</td>
      <td>82.129997</td>
      <td>41.099998</td>
      <td>50.5</td>
      <td>51</td>
      <td>0.2</td>
      <td>20.80</td>
      <td>41.10</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2010-01-03</td>
      <td>82.150002</td>
      <td>41.299999</td>
      <td>48.5</td>
      <td>51</td>
      <td>11.5</td>
      <td>20.90</td>
      <td>41.30</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2010-01-04</td>
      <td>82.150002</td>
      <td>32.099998</td>
      <td>47.2</td>
      <td>54</td>
      <td>17.7</td>
      <td>17.40</td>
      <td>32.10</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2010-01-05</td>
      <td>82.150002</td>
      <td>42.799999</td>
      <td>50.4</td>
      <td>56</td>
      <td>10.8</td>
      <td>23.80</td>
      <td>42.80</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>3785</th>
      <td>2020-05-14</td>
      <td>139.160004</td>
      <td>87.849998</td>
      <td>67.45</td>
      <td>62.70</td>
      <td>-7.05</td>
      <td>55.08</td>
      <td>87.85</td>
    </tr>
    <tr>
      <th>3786</th>
      <td>2020-05-15</td>
      <td>139.160004</td>
      <td>82.989998</td>
      <td>65.81</td>
      <td>64.91</td>
      <td>-1.36</td>
      <td>53.87</td>
      <td>82.99</td>
    </tr>
    <tr>
      <th>3787</th>
      <td>2020-05-16</td>
      <td>139.160004</td>
      <td>73.599998</td>
      <td>62.51</td>
      <td>61.75</td>
      <td>-1.22</td>
      <td>45.45</td>
      <td>73.60</td>
    </tr>
    <tr>
      <th>3788</th>
      <td>2020-05-17</td>
      <td>139.160004</td>
      <td>78.250000</td>
      <td>62.95</td>
      <td>61.55</td>
      <td>-2.22</td>
      <td>48.16</td>
      <td>78.25</td>
    </tr>
    <tr>
      <th>3789</th>
      <td>2020-05-18</td>
      <td>139.160004</td>
      <td>84.540001</td>
      <td>66.67</td>
      <td>63.91</td>
      <td>-4.13</td>
      <td>54.03</td>
      <td>84.54</td>
    </tr>
  </tbody>
</table>
<p>3790 rows × 8 columns</p>
</div>




```python
supply_df.head(3)
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>일시</th>
      <th>설비용량</th>
      <th>공급능력</th>
      <th>전년최대전력</th>
      <th>금년최대전력</th>
      <th>증가율</th>
      <th>공급예비력</th>
      <th>예비율</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2010-01-01</td>
      <td>82.129997</td>
      <td>38.900002</td>
      <td>49.2</td>
      <td>51</td>
      <td>3</td>
      <td>20.0</td>
      <td>38.9</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2010-01-02</td>
      <td>82.129997</td>
      <td>41.099998</td>
      <td>50.5</td>
      <td>51</td>
      <td>0.2</td>
      <td>20.8</td>
      <td>41.1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2010-01-03</td>
      <td>82.150002</td>
      <td>41.299999</td>
      <td>48.5</td>
      <td>51</td>
      <td>11.5</td>
      <td>20.9</td>
      <td>41.3</td>
    </tr>
  </tbody>
</table>
</div>




```python
supply_df.tail(3)
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>일시</th>
      <th>설비용량</th>
      <th>공급능력</th>
      <th>전년최대전력</th>
      <th>금년최대전력</th>
      <th>증가율</th>
      <th>공급예비력</th>
      <th>예비율</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>3787</th>
      <td>2020-05-16</td>
      <td>139.160004</td>
      <td>73.599998</td>
      <td>62.51</td>
      <td>61.75</td>
      <td>-1.22</td>
      <td>45.45</td>
      <td>73.60</td>
    </tr>
    <tr>
      <th>3788</th>
      <td>2020-05-17</td>
      <td>139.160004</td>
      <td>78.250000</td>
      <td>62.95</td>
      <td>61.55</td>
      <td>-2.22</td>
      <td>48.16</td>
      <td>78.25</td>
    </tr>
    <tr>
      <th>3789</th>
      <td>2020-05-18</td>
      <td>139.160004</td>
      <td>84.540001</td>
      <td>66.67</td>
      <td>63.91</td>
      <td>-4.13</td>
      <td>54.03</td>
      <td>84.54</td>
    </tr>
  </tbody>
</table>
</div>



## Weather 


```python
weather_files
```




    ['data/weather\\OBS_ASOS_DD_20211125175249.csv',
     'data/weather\\OBS_ASOS_DD_20211125175328.csv']




```python
weather_dfs = []
for i in range(len(weather_files)):
    tmp = pd.read_csv(weather_files[i],encoding='cp949')
    tmp.columns = ['지점','지점명','일시','평균기온','최저기온','최고기온']
    tmp.drop(['지점명'],axis=1, inplace=True)
    weather_dfs.append(tmp)
    
weather_df = pd.concat(weather_dfs)
```


```python
weather_df.head(3)
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>지점</th>
      <th>일시</th>
      <th>평균기온</th>
      <th>최저기온</th>
      <th>최고기온</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>184</td>
      <td>2010-01-01</td>
      <td>3.7</td>
      <td>1.6</td>
      <td>7.3</td>
    </tr>
    <tr>
      <th>1</th>
      <td>184</td>
      <td>2010-01-02</td>
      <td>9.0</td>
      <td>2.7</td>
      <td>14.5</td>
    </tr>
    <tr>
      <th>2</th>
      <td>184</td>
      <td>2010-01-03</td>
      <td>4.2</td>
      <td>1.8</td>
      <td>6.6</td>
    </tr>
  </tbody>
</table>
</div>




```python
type(weather_df)
```




    pandas.core.frame.DataFrame




```python
start_end_weather = (weather_df['일시']>=start) & (weather_df['일시']<=end)
```


```python
weather_df = weather_df[start_end_weather]
```


```python
weather_df
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>지점</th>
      <th>일시</th>
      <th>평균기온</th>
      <th>최저기온</th>
      <th>최고기온</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>184</td>
      <td>2010-01-01</td>
      <td>3.7</td>
      <td>1.6</td>
      <td>7.3</td>
    </tr>
    <tr>
      <th>1</th>
      <td>184</td>
      <td>2010-01-02</td>
      <td>9.0</td>
      <td>2.7</td>
      <td>14.5</td>
    </tr>
    <tr>
      <th>2</th>
      <td>184</td>
      <td>2010-01-03</td>
      <td>4.2</td>
      <td>1.8</td>
      <td>6.6</td>
    </tr>
    <tr>
      <th>3</th>
      <td>184</td>
      <td>2010-01-04</td>
      <td>6.6</td>
      <td>2.0</td>
      <td>12.5</td>
    </tr>
    <tr>
      <th>4</th>
      <td>184</td>
      <td>2010-01-05</td>
      <td>1.8</td>
      <td>1.1</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>2216</th>
      <td>189</td>
      <td>2020-05-14</td>
      <td>19.6</td>
      <td>14.2</td>
      <td>23.0</td>
    </tr>
    <tr>
      <th>2217</th>
      <td>189</td>
      <td>2020-05-15</td>
      <td>19.4</td>
      <td>18.0</td>
      <td>20.9</td>
    </tr>
    <tr>
      <th>2218</th>
      <td>189</td>
      <td>2020-05-16</td>
      <td>18.3</td>
      <td>17.0</td>
      <td>21.9</td>
    </tr>
    <tr>
      <th>2219</th>
      <td>189</td>
      <td>2020-05-17</td>
      <td>17.8</td>
      <td>14.9</td>
      <td>20.7</td>
    </tr>
    <tr>
      <th>2220</th>
      <td>189</td>
      <td>2020-05-18</td>
      <td>19.4</td>
      <td>17.2</td>
      <td>21.5</td>
    </tr>
  </tbody>
</table>
<p>15164 rows × 5 columns</p>
</div>




```python
 weather_df['일시'] = pd.to_datetime(weather_df['일시'].astype(str))
```


```python
weather_df = weather_df.groupby('일시').mean()
```


```python
# df.groupby('sex').mean()
# df.groupby[('sex','pclass')]['survived'].mean()
# ~~ "별" ~~"의" 평균
```


```python
weather_df.index
```




    DatetimeIndex(['2010-01-01', '2010-01-02', '2010-01-03', '2010-01-04',
                   '2010-01-05', '2010-01-06', '2010-01-07', '2010-01-08',
                   '2010-01-09', '2010-01-10',
                   ...
                   '2020-05-09', '2020-05-10', '2020-05-11', '2020-05-12',
                   '2020-05-13', '2020-05-14', '2020-05-15', '2020-05-16',
                   '2020-05-17', '2020-05-18'],
                  dtype='datetime64[ns]', name='일시', length=3791, freq=None)




```python
weather_df.reset_index(inplace=True)
```


```python
smp_df.set_index('일시',inplace=True)
supply_df.set_index('일시',inplace=True)
weather_df.set_index('일시',inplace=True)
```


```python
smp_df.index
```




    DatetimeIndex(['2010-01-01', '2010-01-02', '2010-01-03', '2010-01-04',
                   '2010-01-05', '2010-01-06', '2010-01-07', '2010-01-08',
                   '2010-01-09', '2010-01-10',
                   ...
                   '2020-05-09', '2020-05-10', '2020-05-11', '2020-05-12',
                   '2020-05-13', '2020-05-14', '2020-05-15', '2020-05-16',
                   '2020-05-17', '2020-05-18'],
                  dtype='datetime64[ns]', name='일시', length=3791, freq=None)




```python
supply_df.index
```




    DatetimeIndex(['2010-01-01', '2010-01-02', '2010-01-03', '2010-01-04',
                   '2010-01-05', '2010-01-06', '2010-01-07', '2010-01-08',
                   '2010-01-09', '2010-01-10',
                   ...
                   '2020-05-09', '2020-05-10', '2020-05-11', '2020-05-12',
                   '2020-05-13', '2020-05-14', '2020-05-15', '2020-05-16',
                   '2020-05-17', '2020-05-18'],
                  dtype='datetime64[ns]', name='일시', length=3790, freq=None)




```python
weather_df.index
```




    DatetimeIndex(['2010-01-01', '2010-01-02', '2010-01-03', '2010-01-04',
                   '2010-01-05', '2010-01-06', '2010-01-07', '2010-01-08',
                   '2010-01-09', '2010-01-10',
                   ...
                   '2020-05-09', '2020-05-10', '2020-05-11', '2020-05-12',
                   '2020-05-13', '2020-05-14', '2020-05-15', '2020-05-16',
                   '2020-05-17', '2020-05-18'],
                  dtype='datetime64[ns]', name='일시', length=3791, freq=None)



## Data 합치기 (SMP, Supply, Weather) 


```python
train_df = pd.concat([smp_df,weather_df,supply_df], axis=1)
```


```python
train_df
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>최소</th>
      <th>최대</th>
      <th>평균</th>
      <th>지점</th>
      <th>평균기온</th>
      <th>최저기온</th>
      <th>최고기온</th>
      <th>설비용량</th>
      <th>공급능력</th>
      <th>전년최대전력</th>
      <th>금년최대전력</th>
      <th>증가율</th>
      <th>공급예비력</th>
      <th>예비율</th>
    </tr>
    <tr>
      <th>일시</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2010-01-01</th>
      <td>146.94</td>
      <td>174.02</td>
      <td>157.70</td>
      <td>186.5</td>
      <td>3.800</td>
      <td>0.750</td>
      <td>8.075</td>
      <td>82.129997</td>
      <td>38.900002</td>
      <td>49.2</td>
      <td>51</td>
      <td>3</td>
      <td>20.00</td>
      <td>38.90</td>
    </tr>
    <tr>
      <th>2010-01-02</th>
      <td>147.44</td>
      <td>159.51</td>
      <td>153.33</td>
      <td>186.5</td>
      <td>9.450</td>
      <td>3.750</td>
      <td>15.150</td>
      <td>82.129997</td>
      <td>41.099998</td>
      <td>50.5</td>
      <td>51</td>
      <td>0.2</td>
      <td>20.80</td>
      <td>41.10</td>
    </tr>
    <tr>
      <th>2010-01-03</th>
      <td>148.40</td>
      <td>176.15</td>
      <td>158.78</td>
      <td>186.5</td>
      <td>4.775</td>
      <td>2.350</td>
      <td>7.200</td>
      <td>82.150002</td>
      <td>41.299999</td>
      <td>48.5</td>
      <td>51</td>
      <td>11.5</td>
      <td>20.90</td>
      <td>41.30</td>
    </tr>
    <tr>
      <th>2010-01-04</th>
      <td>150.18</td>
      <td>168.55</td>
      <td>161.65</td>
      <td>186.5</td>
      <td>7.700</td>
      <td>2.275</td>
      <td>13.500</td>
      <td>82.150002</td>
      <td>32.099998</td>
      <td>47.2</td>
      <td>54</td>
      <td>17.7</td>
      <td>17.40</td>
      <td>32.10</td>
    </tr>
    <tr>
      <th>2010-01-05</th>
      <td>155.30</td>
      <td>290.69</td>
      <td>169.82</td>
      <td>186.5</td>
      <td>1.825</td>
      <td>0.775</td>
      <td>4.275</td>
      <td>82.150002</td>
      <td>42.799999</td>
      <td>50.4</td>
      <td>56</td>
      <td>10.8</td>
      <td>23.80</td>
      <td>42.80</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>2020-05-14</th>
      <td>66.78</td>
      <td>193.28</td>
      <td>100.46</td>
      <td>186.5</td>
      <td>19.125</td>
      <td>13.475</td>
      <td>23.650</td>
      <td>139.160004</td>
      <td>87.849998</td>
      <td>67.45</td>
      <td>62.70</td>
      <td>-7.05</td>
      <td>55.08</td>
      <td>87.85</td>
    </tr>
    <tr>
      <th>2020-05-15</th>
      <td>61.81</td>
      <td>198.23</td>
      <td>102.38</td>
      <td>186.5</td>
      <td>19.775</td>
      <td>18.125</td>
      <td>22.900</td>
      <td>139.160004</td>
      <td>82.989998</td>
      <td>65.81</td>
      <td>64.91</td>
      <td>-1.36</td>
      <td>53.87</td>
      <td>82.99</td>
    </tr>
    <tr>
      <th>2020-05-16</th>
      <td>88.50</td>
      <td>220.91</td>
      <td>121.19</td>
      <td>186.5</td>
      <td>17.275</td>
      <td>15.250</td>
      <td>20.300</td>
      <td>139.160004</td>
      <td>73.599998</td>
      <td>62.51</td>
      <td>61.75</td>
      <td>-1.22</td>
      <td>45.45</td>
      <td>73.60</td>
    </tr>
    <tr>
      <th>2020-05-17</th>
      <td>65.78</td>
      <td>207.75</td>
      <td>116.82</td>
      <td>186.5</td>
      <td>17.400</td>
      <td>13.925</td>
      <td>21.050</td>
      <td>139.160004</td>
      <td>78.250000</td>
      <td>62.95</td>
      <td>61.55</td>
      <td>-2.22</td>
      <td>48.16</td>
      <td>78.25</td>
    </tr>
    <tr>
      <th>2020-05-18</th>
      <td>66.86</td>
      <td>113.31</td>
      <td>98.98</td>
      <td>186.5</td>
      <td>18.875</td>
      <td>15.600</td>
      <td>23.925</td>
      <td>139.160004</td>
      <td>84.540001</td>
      <td>66.67</td>
      <td>63.91</td>
      <td>-4.13</td>
      <td>54.03</td>
      <td>84.54</td>
    </tr>
  </tbody>
</table>
<p>3791 rows × 14 columns</p>
</div>




```python
train_df =train_df.reset_index()
```

* supply_df에 없는 Data 찾아서 삭제하기


```python
train_df.loc[(train_df['설비용량'].isna())]
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>일시</th>
      <th>최소</th>
      <th>최대</th>
      <th>평균</th>
      <th>지점</th>
      <th>평균기온</th>
      <th>최저기온</th>
      <th>최고기온</th>
      <th>설비용량</th>
      <th>공급능력</th>
      <th>전년최대전력</th>
      <th>금년최대전력</th>
      <th>증가율</th>
      <th>공급예비력</th>
      <th>예비율</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2328</th>
      <td>2016-05-17</td>
      <td>72.81</td>
      <td>78.03</td>
      <td>75.37</td>
      <td>186.5</td>
      <td>18.7</td>
      <td>12.5</td>
      <td>24.075</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
</div>




```python
train_df = train_df.drop(index=2328)
```


```python
train_df.reset_index(drop=True)
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>일시</th>
      <th>최소</th>
      <th>최대</th>
      <th>평균</th>
      <th>지점</th>
      <th>평균기온</th>
      <th>최저기온</th>
      <th>최고기온</th>
      <th>설비용량</th>
      <th>공급능력</th>
      <th>전년최대전력</th>
      <th>금년최대전력</th>
      <th>증가율</th>
      <th>공급예비력</th>
      <th>예비율</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2010-01-01</td>
      <td>146.94</td>
      <td>174.02</td>
      <td>157.70</td>
      <td>186.5</td>
      <td>3.800</td>
      <td>0.750</td>
      <td>8.075</td>
      <td>82.129997</td>
      <td>38.900002</td>
      <td>49.2</td>
      <td>51</td>
      <td>3</td>
      <td>20.00</td>
      <td>38.90</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2010-01-02</td>
      <td>147.44</td>
      <td>159.51</td>
      <td>153.33</td>
      <td>186.5</td>
      <td>9.450</td>
      <td>3.750</td>
      <td>15.150</td>
      <td>82.129997</td>
      <td>41.099998</td>
      <td>50.5</td>
      <td>51</td>
      <td>0.2</td>
      <td>20.80</td>
      <td>41.10</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2010-01-03</td>
      <td>148.40</td>
      <td>176.15</td>
      <td>158.78</td>
      <td>186.5</td>
      <td>4.775</td>
      <td>2.350</td>
      <td>7.200</td>
      <td>82.150002</td>
      <td>41.299999</td>
      <td>48.5</td>
      <td>51</td>
      <td>11.5</td>
      <td>20.90</td>
      <td>41.30</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2010-01-04</td>
      <td>150.18</td>
      <td>168.55</td>
      <td>161.65</td>
      <td>186.5</td>
      <td>7.700</td>
      <td>2.275</td>
      <td>13.500</td>
      <td>82.150002</td>
      <td>32.099998</td>
      <td>47.2</td>
      <td>54</td>
      <td>17.7</td>
      <td>17.40</td>
      <td>32.10</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2010-01-05</td>
      <td>155.30</td>
      <td>290.69</td>
      <td>169.82</td>
      <td>186.5</td>
      <td>1.825</td>
      <td>0.775</td>
      <td>4.275</td>
      <td>82.150002</td>
      <td>42.799999</td>
      <td>50.4</td>
      <td>56</td>
      <td>10.8</td>
      <td>23.80</td>
      <td>42.80</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>3785</th>
      <td>2020-05-14</td>
      <td>66.78</td>
      <td>193.28</td>
      <td>100.46</td>
      <td>186.5</td>
      <td>19.125</td>
      <td>13.475</td>
      <td>23.650</td>
      <td>139.160004</td>
      <td>87.849998</td>
      <td>67.45</td>
      <td>62.70</td>
      <td>-7.05</td>
      <td>55.08</td>
      <td>87.85</td>
    </tr>
    <tr>
      <th>3786</th>
      <td>2020-05-15</td>
      <td>61.81</td>
      <td>198.23</td>
      <td>102.38</td>
      <td>186.5</td>
      <td>19.775</td>
      <td>18.125</td>
      <td>22.900</td>
      <td>139.160004</td>
      <td>82.989998</td>
      <td>65.81</td>
      <td>64.91</td>
      <td>-1.36</td>
      <td>53.87</td>
      <td>82.99</td>
    </tr>
    <tr>
      <th>3787</th>
      <td>2020-05-16</td>
      <td>88.50</td>
      <td>220.91</td>
      <td>121.19</td>
      <td>186.5</td>
      <td>17.275</td>
      <td>15.250</td>
      <td>20.300</td>
      <td>139.160004</td>
      <td>73.599998</td>
      <td>62.51</td>
      <td>61.75</td>
      <td>-1.22</td>
      <td>45.45</td>
      <td>73.60</td>
    </tr>
    <tr>
      <th>3788</th>
      <td>2020-05-17</td>
      <td>65.78</td>
      <td>207.75</td>
      <td>116.82</td>
      <td>186.5</td>
      <td>17.400</td>
      <td>13.925</td>
      <td>21.050</td>
      <td>139.160004</td>
      <td>78.250000</td>
      <td>62.95</td>
      <td>61.55</td>
      <td>-2.22</td>
      <td>48.16</td>
      <td>78.25</td>
    </tr>
    <tr>
      <th>3789</th>
      <td>2020-05-18</td>
      <td>66.86</td>
      <td>113.31</td>
      <td>98.98</td>
      <td>186.5</td>
      <td>18.875</td>
      <td>15.600</td>
      <td>23.925</td>
      <td>139.160004</td>
      <td>84.540001</td>
      <td>66.67</td>
      <td>63.91</td>
      <td>-4.13</td>
      <td>54.03</td>
      <td>84.54</td>
    </tr>
  </tbody>
</table>
<p>3790 rows × 15 columns</p>
</div>



* Train 위한 Data set 만들기 


```python
train_df.head(5)
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>일시</th>
      <th>최소</th>
      <th>최대</th>
      <th>평균</th>
      <th>지점</th>
      <th>평균기온</th>
      <th>최저기온</th>
      <th>최고기온</th>
      <th>설비용량</th>
      <th>공급능력</th>
      <th>전년최대전력</th>
      <th>금년최대전력</th>
      <th>증가율</th>
      <th>공급예비력</th>
      <th>예비율</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2010-01-01</td>
      <td>146.94</td>
      <td>174.02</td>
      <td>157.70</td>
      <td>186.5</td>
      <td>3.800</td>
      <td>0.750</td>
      <td>8.075</td>
      <td>82.129997</td>
      <td>38.900002</td>
      <td>49.2</td>
      <td>51</td>
      <td>3</td>
      <td>20.0</td>
      <td>38.9</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2010-01-02</td>
      <td>147.44</td>
      <td>159.51</td>
      <td>153.33</td>
      <td>186.5</td>
      <td>9.450</td>
      <td>3.750</td>
      <td>15.150</td>
      <td>82.129997</td>
      <td>41.099998</td>
      <td>50.5</td>
      <td>51</td>
      <td>0.2</td>
      <td>20.8</td>
      <td>41.1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2010-01-03</td>
      <td>148.40</td>
      <td>176.15</td>
      <td>158.78</td>
      <td>186.5</td>
      <td>4.775</td>
      <td>2.350</td>
      <td>7.200</td>
      <td>82.150002</td>
      <td>41.299999</td>
      <td>48.5</td>
      <td>51</td>
      <td>11.5</td>
      <td>20.9</td>
      <td>41.3</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2010-01-04</td>
      <td>150.18</td>
      <td>168.55</td>
      <td>161.65</td>
      <td>186.5</td>
      <td>7.700</td>
      <td>2.275</td>
      <td>13.500</td>
      <td>82.150002</td>
      <td>32.099998</td>
      <td>47.2</td>
      <td>54</td>
      <td>17.7</td>
      <td>17.4</td>
      <td>32.1</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2010-01-05</td>
      <td>155.30</td>
      <td>290.69</td>
      <td>169.82</td>
      <td>186.5</td>
      <td>1.825</td>
      <td>0.775</td>
      <td>4.275</td>
      <td>82.150002</td>
      <td>42.799999</td>
      <td>50.4</td>
      <td>56</td>
      <td>10.8</td>
      <td>23.8</td>
      <td>42.8</td>
    </tr>
  </tbody>
</table>
</div>




```python
train = pd.DataFrame()
train['date'] = train_df['일시']
train['month'] = train['date'].dt.month.astype(np.int32)
train['day'] = train['date'].dt.day.astype(np.int32)
train['weekday'] = train['date'].dt.weekday.astype(np.int32)
train['temp_mean'] = train_df['평균기온'].astype(np.float32)
train['temp_max'] = train_df['최고기온'].astype(np.float32)
train['temp_min'] = train_df['최저기온'].astype(np.float32)
train['supply_capacity'] = train_df['설비용량'].astype(np.float32)
train['supply_ability'] = train_df['공급능력'].astype(np.float32)
train['demand_preyear'] = train_df['전년최대전력'].astype(np.float32)
train['supply_reserve'] = train_df['공급예비력'].astype(np.float32)
train['supply_reserve_ratio'] = train_df['예비율'].astype(np.float32)
train['smp_min'] = train_df['최소'].astype(np.float32)
train['smp_max'] = train_df['최대'].astype(np.float32)
train['smp_mean'] = train_df['평균'].astype(np.float32)
train['demand_thisyear'] = train_df['금년최대전력'].astype(np.float32)
```


```python
train.tail(5)
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>date</th>
      <th>month</th>
      <th>day</th>
      <th>weekday</th>
      <th>temp_mean</th>
      <th>temp_max</th>
      <th>temp_min</th>
      <th>supply_capacity</th>
      <th>supply_ability</th>
      <th>demand_preyear</th>
      <th>supply_reserve</th>
      <th>supply_reserve_ratio</th>
      <th>smp_min</th>
      <th>smp_max</th>
      <th>smp_mean</th>
      <th>demand_thisyear</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>3786</th>
      <td>2020-05-14</td>
      <td>5</td>
      <td>14</td>
      <td>3</td>
      <td>19.125</td>
      <td>23.650000</td>
      <td>13.475</td>
      <td>139.160004</td>
      <td>87.849998</td>
      <td>67.449997</td>
      <td>55.080002</td>
      <td>87.849998</td>
      <td>66.779999</td>
      <td>193.279999</td>
      <td>100.459999</td>
      <td>62.700001</td>
    </tr>
    <tr>
      <th>3787</th>
      <td>2020-05-15</td>
      <td>5</td>
      <td>15</td>
      <td>4</td>
      <td>19.775</td>
      <td>22.900000</td>
      <td>18.125</td>
      <td>139.160004</td>
      <td>82.989998</td>
      <td>65.809998</td>
      <td>53.869999</td>
      <td>82.989998</td>
      <td>61.810001</td>
      <td>198.229996</td>
      <td>102.379997</td>
      <td>64.910004</td>
    </tr>
    <tr>
      <th>3788</th>
      <td>2020-05-16</td>
      <td>5</td>
      <td>16</td>
      <td>5</td>
      <td>17.275</td>
      <td>20.299999</td>
      <td>15.250</td>
      <td>139.160004</td>
      <td>73.599998</td>
      <td>62.509998</td>
      <td>45.450001</td>
      <td>73.599998</td>
      <td>88.500000</td>
      <td>220.910004</td>
      <td>121.190002</td>
      <td>61.750000</td>
    </tr>
    <tr>
      <th>3789</th>
      <td>2020-05-17</td>
      <td>5</td>
      <td>17</td>
      <td>6</td>
      <td>17.400</td>
      <td>21.049999</td>
      <td>13.925</td>
      <td>139.160004</td>
      <td>78.250000</td>
      <td>62.950001</td>
      <td>48.160000</td>
      <td>78.250000</td>
      <td>65.779999</td>
      <td>207.750000</td>
      <td>116.820000</td>
      <td>61.549999</td>
    </tr>
    <tr>
      <th>3790</th>
      <td>2020-05-18</td>
      <td>5</td>
      <td>18</td>
      <td>0</td>
      <td>18.875</td>
      <td>23.924999</td>
      <td>15.600</td>
      <td>139.160004</td>
      <td>84.540001</td>
      <td>66.669998</td>
      <td>54.029999</td>
      <td>84.540001</td>
      <td>66.860001</td>
      <td>113.309998</td>
      <td>98.980003</td>
      <td>63.910000</td>
    </tr>
  </tbody>
</table>
</div>




```python
train.head()
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>date</th>
      <th>month</th>
      <th>day</th>
      <th>weekday</th>
      <th>temp_mean</th>
      <th>temp_max</th>
      <th>temp_min</th>
      <th>supply_capacity</th>
      <th>supply_ability</th>
      <th>demand_preyear</th>
      <th>supply_reserve</th>
      <th>supply_reserve_ratio</th>
      <th>smp_min</th>
      <th>smp_max</th>
      <th>smp_mean</th>
      <th>demand_thisyear</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2010-01-01</td>
      <td>1</td>
      <td>1</td>
      <td>4</td>
      <td>3.800</td>
      <td>8.075</td>
      <td>0.750</td>
      <td>82.129997</td>
      <td>38.900002</td>
      <td>49.200001</td>
      <td>20.000000</td>
      <td>38.900002</td>
      <td>146.940002</td>
      <td>174.020004</td>
      <td>157.699997</td>
      <td>51.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2010-01-02</td>
      <td>1</td>
      <td>2</td>
      <td>5</td>
      <td>9.450</td>
      <td>15.150</td>
      <td>3.750</td>
      <td>82.129997</td>
      <td>41.099998</td>
      <td>50.500000</td>
      <td>20.799999</td>
      <td>41.099998</td>
      <td>147.440002</td>
      <td>159.509995</td>
      <td>153.330002</td>
      <td>51.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2010-01-03</td>
      <td>1</td>
      <td>3</td>
      <td>6</td>
      <td>4.775</td>
      <td>7.200</td>
      <td>2.350</td>
      <td>82.150002</td>
      <td>41.299999</td>
      <td>48.500000</td>
      <td>20.900000</td>
      <td>41.299999</td>
      <td>148.399994</td>
      <td>176.149994</td>
      <td>158.779999</td>
      <td>51.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2010-01-04</td>
      <td>1</td>
      <td>4</td>
      <td>0</td>
      <td>7.700</td>
      <td>13.500</td>
      <td>2.275</td>
      <td>82.150002</td>
      <td>32.099998</td>
      <td>47.200001</td>
      <td>17.400000</td>
      <td>32.099998</td>
      <td>150.179993</td>
      <td>168.550003</td>
      <td>161.649994</td>
      <td>54.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2010-01-05</td>
      <td>1</td>
      <td>5</td>
      <td>1</td>
      <td>1.825</td>
      <td>4.275</td>
      <td>0.775</td>
      <td>82.150002</td>
      <td>42.799999</td>
      <td>50.400002</td>
      <td>23.799999</td>
      <td>42.799999</td>
      <td>155.300003</td>
      <td>290.690002</td>
      <td>169.820007</td>
      <td>56.0</td>
    </tr>
  </tbody>
</table>
</div>




```python
train.dtypes
```




    date                    datetime64[ns]
    month                            int32
    day                              int32
    weekday                          int32
    temp_mean                      float32
    temp_max                       float32
    temp_min                       float32
    supply_capacity                float32
    supply_ability                 float32
    demand_preyear                 float32
    supply_reserve                 float32
    supply_reserve_ratio           float32
    smp_min                        float32
    smp_max                        float32
    smp_mean                       float32
    demand_thisyear                float32
    dtype: object



# 3. EDA (Exploratory Data Analysis)

### SMP 
   * <span style="color:red"> smp_min(y값) </span>
   * <span style="color:red"> smp_max(y값) </span>
   * <span style="color:red"> smp_mean(y값) </span> 

### Weather 
   * temp_mean
   * temp_max
   * temp_min
   
### Supply & Demand 
   * supply_capacity
   * supply_ability
   * demand_preyer
   * <span style="color:red"> demand_thisyear(y값) </span> 
   * supply_reserve
   * supply_reserve_ratio

## 3-0. Data간 상관관계도 확인


```python
corr = train.corr()
corr
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>month</th>
      <th>day</th>
      <th>weekday</th>
      <th>temp_mean</th>
      <th>temp_max</th>
      <th>temp_min</th>
      <th>supply_capacity</th>
      <th>supply_ability</th>
      <th>demand_preyear</th>
      <th>supply_reserve</th>
      <th>supply_reserve_ratio</th>
      <th>smp_min</th>
      <th>smp_max</th>
      <th>smp_mean</th>
      <th>demand_thisyear</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>month</th>
      <td>1.000000</td>
      <td>0.012021</td>
      <td>0.000002</td>
      <td>0.372005</td>
      <td>0.360755</td>
      <td>0.373650</td>
      <td>0.012593</td>
      <td>0.165850</td>
      <td>-0.123612</td>
      <td>0.084941</td>
      <td>0.165850</td>
      <td>0.029235</td>
      <td>0.027817</td>
      <td>0.066462</td>
      <td>-0.136914</td>
    </tr>
    <tr>
      <th>day</th>
      <td>0.012021</td>
      <td>1.000000</td>
      <td>-0.001792</td>
      <td>0.016211</td>
      <td>0.015162</td>
      <td>0.013028</td>
      <td>-0.003586</td>
      <td>-0.030736</td>
      <td>0.006030</td>
      <td>-0.031606</td>
      <td>-0.030736</td>
      <td>0.009925</td>
      <td>-0.004323</td>
      <td>0.007196</td>
      <td>0.006233</td>
    </tr>
    <tr>
      <th>weekday</th>
      <td>0.000002</td>
      <td>-0.001792</td>
      <td>1.000000</td>
      <td>0.001491</td>
      <td>0.004248</td>
      <td>-0.005520</td>
      <td>0.000868</td>
      <td>0.130386</td>
      <td>-0.018173</td>
      <td>0.080198</td>
      <td>0.130386</td>
      <td>-0.003112</td>
      <td>-0.018435</td>
      <td>-0.015342</td>
      <td>-0.090767</td>
    </tr>
    <tr>
      <th>temp_mean</th>
      <td>0.372005</td>
      <td>0.016211</td>
      <td>0.001491</td>
      <td>1.000000</td>
      <td>0.991592</td>
      <td>0.988871</td>
      <td>0.001796</td>
      <td>0.014982</td>
      <td>-0.110002</td>
      <td>-0.093777</td>
      <td>0.014982</td>
      <td>0.023419</td>
      <td>0.013939</td>
      <td>0.057744</td>
      <td>-0.142813</td>
    </tr>
    <tr>
      <th>temp_max</th>
      <td>0.360755</td>
      <td>0.015162</td>
      <td>0.004248</td>
      <td>0.991592</td>
      <td>1.000000</td>
      <td>0.967211</td>
      <td>0.006866</td>
      <td>0.013932</td>
      <td>-0.114568</td>
      <td>-0.096475</td>
      <td>0.013932</td>
      <td>0.018629</td>
      <td>0.010655</td>
      <td>0.051792</td>
      <td>-0.147384</td>
    </tr>
    <tr>
      <th>temp_min</th>
      <td>0.373650</td>
      <td>0.013028</td>
      <td>-0.005520</td>
      <td>0.988871</td>
      <td>0.967211</td>
      <td>1.000000</td>
      <td>-0.001579</td>
      <td>0.012789</td>
      <td>-0.101412</td>
      <td>-0.089199</td>
      <td>0.012789</td>
      <td>0.025930</td>
      <td>0.016445</td>
      <td>0.061163</td>
      <td>-0.129141</td>
    </tr>
    <tr>
      <th>supply_capacity</th>
      <td>0.012593</td>
      <td>-0.003586</td>
      <td>0.000868</td>
      <td>0.001796</td>
      <td>0.006866</td>
      <td>-0.001579</td>
      <td>1.000000</td>
      <td>0.149925</td>
      <td>0.716507</td>
      <td>0.501496</td>
      <td>0.149925</td>
      <td>-0.522000</td>
      <td>-0.298706</td>
      <td>-0.462821</td>
      <td>0.682936</td>
    </tr>
    <tr>
      <th>supply_ability</th>
      <td>0.165850</td>
      <td>-0.030736</td>
      <td>0.130386</td>
      <td>0.014982</td>
      <td>0.013932</td>
      <td>0.012789</td>
      <td>0.149925</td>
      <td>1.000000</td>
      <td>-0.052933</td>
      <td>0.862704</td>
      <td>1.000000</td>
      <td>-0.282626</td>
      <td>-0.267082</td>
      <td>-0.280164</td>
      <td>-0.225657</td>
    </tr>
    <tr>
      <th>demand_preyear</th>
      <td>-0.123612</td>
      <td>0.006030</td>
      <td>-0.018173</td>
      <td>-0.110002</td>
      <td>-0.114568</td>
      <td>-0.101412</td>
      <td>0.716507</td>
      <td>-0.052933</td>
      <td>1.000000</td>
      <td>0.396011</td>
      <td>-0.052933</td>
      <td>-0.468423</td>
      <td>-0.285415</td>
      <td>-0.436473</td>
      <td>0.897437</td>
    </tr>
    <tr>
      <th>supply_reserve</th>
      <td>0.084941</td>
      <td>-0.031606</td>
      <td>0.080198</td>
      <td>-0.093777</td>
      <td>-0.096475</td>
      <td>-0.089199</td>
      <td>0.501496</td>
      <td>0.862704</td>
      <td>0.396011</td>
      <td>1.000000</td>
      <td>0.862704</td>
      <td>-0.506726</td>
      <td>-0.400350</td>
      <td>-0.489325</td>
      <td>0.269309</td>
    </tr>
    <tr>
      <th>supply_reserve_ratio</th>
      <td>0.165850</td>
      <td>-0.030736</td>
      <td>0.130386</td>
      <td>0.014982</td>
      <td>0.013932</td>
      <td>0.012789</td>
      <td>0.149925</td>
      <td>1.000000</td>
      <td>-0.052933</td>
      <td>0.862704</td>
      <td>1.000000</td>
      <td>-0.282626</td>
      <td>-0.267082</td>
      <td>-0.280164</td>
      <td>-0.225657</td>
    </tr>
    <tr>
      <th>smp_min</th>
      <td>0.029235</td>
      <td>0.009925</td>
      <td>-0.003112</td>
      <td>0.023419</td>
      <td>0.018629</td>
      <td>0.025930</td>
      <td>-0.522000</td>
      <td>-0.282626</td>
      <td>-0.468423</td>
      <td>-0.506726</td>
      <td>-0.282626</td>
      <td>1.000000</td>
      <td>0.799001</td>
      <td>0.956811</td>
      <td>-0.482532</td>
    </tr>
    <tr>
      <th>smp_max</th>
      <td>0.027817</td>
      <td>-0.004323</td>
      <td>-0.018435</td>
      <td>0.013939</td>
      <td>0.010655</td>
      <td>0.016445</td>
      <td>-0.298706</td>
      <td>-0.267082</td>
      <td>-0.285415</td>
      <td>-0.400350</td>
      <td>-0.267082</td>
      <td>0.799001</td>
      <td>1.000000</td>
      <td>0.877336</td>
      <td>-0.316293</td>
    </tr>
    <tr>
      <th>smp_mean</th>
      <td>0.066462</td>
      <td>0.007196</td>
      <td>-0.015342</td>
      <td>0.057744</td>
      <td>0.051792</td>
      <td>0.061163</td>
      <td>-0.462821</td>
      <td>-0.280164</td>
      <td>-0.436473</td>
      <td>-0.489325</td>
      <td>-0.280164</td>
      <td>0.956811</td>
      <td>0.877336</td>
      <td>1.000000</td>
      <td>-0.462917</td>
    </tr>
    <tr>
      <th>demand_thisyear</th>
      <td>-0.136914</td>
      <td>0.006233</td>
      <td>-0.090767</td>
      <td>-0.142813</td>
      <td>-0.147384</td>
      <td>-0.129141</td>
      <td>0.682936</td>
      <td>-0.225657</td>
      <td>0.897437</td>
      <td>0.269309</td>
      <td>-0.225657</td>
      <td>-0.482532</td>
      <td>-0.316293</td>
      <td>-0.462917</td>
      <td>1.000000</td>
    </tr>
  </tbody>
</table>
</div>



## * **상관관계별 Data (Targeting 'demand this year')**


```python
condition1 = abs(corr['demand_thisyear'])>=0.7
condition2 = (abs(corr['demand_thisyear'])<0.7) & (abs(corr['demand_thisyear'])>=0.3)
condition3 = (abs(corr['demand_thisyear'])<0.3) & (abs(corr['demand_thisyear'])>=0.1)
condition4 = (abs(corr['demand_thisyear'])<0.1) 
```


```python
corr.loc[condition1]['demand_thisyear'] # demand_preyear 
```




    demand_preyear     0.897437
    demand_thisyear    1.000000
    Name: demand_thisyear, dtype: float64




```python
corr.loc[condition2]['demand_thisyear'] # Supply_capacity, smp_min, smp_max, smp_mean 
```




    supply_capacity    0.682936
    smp_min           -0.482532
    smp_max           -0.316293
    smp_mean          -0.462917
    Name: demand_thisyear, dtype: float64




```python
corr.loc[condition3]['demand_thisyear'] # Month, temp_mean, temp_max, temp_min, supplu ability, supply_reserve, supply_reserve ratio
```




    month                  -0.136914
    temp_mean              -0.142813
    temp_max               -0.147384
    temp_min               -0.129141
    supply_ability         -0.225657
    supply_reserve          0.269309
    supply_reserve_ratio   -0.225657
    Name: demand_thisyear, dtype: float64




```python
corr.loc[condition4]['demand_thisyear'] # 상관관계 없음
```




    day        0.006233
    weekday   -0.090767
    Name: demand_thisyear, dtype: float64



## * **상관관계별 Data (Targeting 'smp_min')**


```python
condition5 = abs(corr['smp_min'])>=0.7
condition6 = (abs(corr['smp_min'])<0.7) & (abs(corr['smp_min'])>=0.3)
condition7 = (abs(corr['smp_min'])<0.3) & (abs(corr['smp_min'])>=0.1)
condition8 = (abs(corr['smp_min'])<0.1) 
```


```python
corr.loc[condition5]['smp_min']
```




    smp_min     1.000000
    smp_max     0.799001
    smp_mean    0.956811
    Name: smp_min, dtype: float64




```python
corr.loc[condition6]['smp_min'] # supply_capacity, 
```




    supply_capacity   -0.522000
    demand_preyear    -0.468423
    supply_reserve    -0.506726
    demand_thisyear   -0.482532
    Name: smp_min, dtype: float64




```python
corr.loc[condition7]['smp_min']
```




    supply_ability         -0.282626
    supply_reserve_ratio   -0.282626
    Name: smp_min, dtype: float64




```python
corr.loc[condition8]['smp_min']
```




    month        0.029235
    day          0.009925
    weekday     -0.003112
    temp_mean    0.023419
    temp_max     0.018629
    temp_min     0.025930
    Name: smp_min, dtype: float64



## * **상관관계별 Data (Targeting 'smp_max')**


```python
condition9 = abs(corr['smp_max'])>=0.7
condition10 = (abs(corr['smp_max'])<0.7) & (abs(corr['smp_max'])>=0.3)
condition11 = (abs(corr['smp_max'])<0.3) & (abs(corr['smp_max'])>=0.1)
condition12 = (abs(corr['smp_max'])<0.1) 
```


```python
corr.loc[condition9]['smp_max']
```




    smp_min     0.799001
    smp_max     1.000000
    smp_mean    0.877336
    Name: smp_max, dtype: float64




```python
corr.loc[condition10]['smp_max']
```




    supply_reserve    -0.400350
    demand_thisyear   -0.316293
    Name: smp_max, dtype: float64




```python
corr.loc[condition11]['smp_max']
```




    supply_capacity        -0.298706
    supply_ability         -0.267082
    demand_preyear         -0.285415
    supply_reserve_ratio   -0.267082
    Name: smp_max, dtype: float64




```python
corr.loc[condition12]['smp_max']
```




    month        0.027817
    day         -0.004323
    weekday     -0.018435
    temp_mean    0.013939
    temp_max     0.010655
    temp_min     0.016445
    Name: smp_max, dtype: float64



## * **상관관계별 Data (Targeting 'smp_mean')**


```python
condition13 = abs(corr['smp_mean'])>=0.7
condition14 = (abs(corr['smp_mean'])<0.7) & (abs(corr['smp_mean'])>=0.3)
condition15 = (abs(corr['smp_mean'])<0.3) & (abs(corr['smp_mean'])>=0.1)
condition16 = (abs(corr['smp_mean'])<0.1) 
```


```python
corr.loc[condition13]['smp_mean']
```




    smp_min     0.956811
    smp_max     0.877336
    smp_mean    1.000000
    Name: smp_mean, dtype: float64




```python
corr.loc[condition14]['smp_max']
```




    supply_capacity   -0.298706
    demand_preyear    -0.285415
    supply_reserve    -0.400350
    demand_thisyear   -0.316293
    Name: smp_max, dtype: float64




```python
corr.loc[condition14]['smp_mean']
```




    supply_capacity   -0.462821
    demand_preyear    -0.436473
    supply_reserve    -0.489325
    demand_thisyear   -0.462917
    Name: smp_mean, dtype: float64




```python
corr.loc[condition15]['smp_mean']
```




    supply_ability         -0.280164
    supply_reserve_ratio   -0.280164
    Name: smp_mean, dtype: float64




```python
corr.loc[condition16]['smp_mean']
```




    month        0.066462
    day          0.007196
    weekday     -0.015342
    temp_mean    0.057744
    temp_max     0.051792
    temp_min     0.061163
    Name: smp_mean, dtype: float64



## 3-1. y 종속변수 분석 (demand_thisyear, 금년도 일별 최대전력수요) 


```python
plt.figure(figsize=(15,5))
sns.lineplot('date','demand_thisyear', data=train, label='demand_thisyear')
plt.grid()
```


    
![png](output_83_0.png)
    



```python
plt.figure(figsize=(15,5))
sns.lineplot('date','supply_capacity', data=train, label='supply_capacity', color='r')
plt.grid()
```


    
![png](output_84_0.png)
    



```python
plt.figure(figsize=(15,5))
sns.lineplot('date','supply_ability', data=train, label='supply_ability', color='r')
plt.grid()
```


    
![png](output_85_0.png)
    


## 3-2. y 종속변수 분석 (SMP 일별 최소, 최대, 평균값) 


```python
plt.figure(figsize=(15,5))
sns.lineplot('date','smp_min', data=train, label='smp_min')
plt.grid()
```


    
![png](output_87_0.png)
    



```python
plt.figure(figsize=(15,5))
sns.lineplot('date','smp_max', data=train, label='smp_max')
plt.grid()
```


    
![png](output_88_0.png)
    



```python
plt.figure(figsize=(15,5))
sns.lineplot('date','smp_mean', data=train, label='smp_mean')
plt.grid()
```


    
![png](output_89_0.png)
    


## 3-3. x 독립변수 분석 (targeting 'demand_thisyear')

* 강한 상관관계 **supply_capacity**, smp_min, smp_max, smp_mean 
* 약한 상관관계 **supply_reserve, supply_ability, temp_man, temp_mean, temp_min, month**


```python
fig, ax = plt.subplots() 
ax.scatter(x=train['supply_capacity'],y=train['demand_thisyear'])
plt.show
```




    <function matplotlib.pyplot.show(close=None, block=None)>




    
![png](output_92_1.png)
    



```python
fig, ax = plt.subplots() 
ax.scatter(x=train['smp_min'],y=train['demand_thisyear'])
plt.show
```




    <function matplotlib.pyplot.show(close=None, block=None)>




    
![png](output_93_1.png)
    



```python
fig, ax = plt.subplots() 
ax.scatter(x=train['smp_max'],y=train['demand_thisyear'])
plt.show
```




    <function matplotlib.pyplot.show(close=None, block=None)>




    
![png](output_94_1.png)
    



```python
fig, ax = plt.subplots() 
ax.scatter(x=train['smp_mean'],y=train['demand_thisyear'])
plt.show
```




    <function matplotlib.pyplot.show(close=None, block=None)>




    
![png](output_95_1.png)
    



```python
fig, ax = plt.subplots() 
ax.scatter(x=train['supply_reserve'],y=train['demand_thisyear'],color='r')
plt.show
```




    <function matplotlib.pyplot.show(close=None, block=None)>




    
![png](output_96_1.png)
    



```python
fig, ax = plt.subplots() 
ax.scatter(x=train['supply_ability'],y=train['demand_thisyear'],color='r')
plt.show
```




    <function matplotlib.pyplot.show(close=None, block=None)>




    
![png](output_97_1.png)
    



```python
fig, ax = plt.subplots() 
ax.scatter(x=train['temp_max'],y=train['demand_thisyear'],color='r')
plt.show
```




    <function matplotlib.pyplot.show(close=None, block=None)>




    
![png](output_98_1.png)
    



```python
fig, ax = plt.subplots() 
ax.scatter(x=train['temp_min'],y=train['demand_thisyear'],color='r')
plt.show
```




    <function matplotlib.pyplot.show(close=None, block=None)>




    
![png](output_99_1.png)
    



```python
fig, ax = plt.subplots() 
ax.scatter(x=train['temp_mean'],y=train['demand_thisyear'],color='r')
plt.show
```




    <function matplotlib.pyplot.show(close=None, block=None)>




    
![png](output_100_1.png)
    



```python
fig, ax = plt.subplots() 
ax.scatter(x=train['month'],y=train['demand_thisyear'],color='r')
plt.show
```




    <function matplotlib.pyplot.show(close=None, block=None)>




    
![png](output_101_1.png)
    


# 4. 변수 선택 및 모델 구축 

#### feature 선택 (상관관계0.3이상 변수) 
- demand_thiyear : demand_preyear, supply_capacity + date관련 변수(month, day,weekday) + 기온관련 변수(temp_max, temp_min, temp_mean) 
- smp_mean : supply_capacity, demand_preyear, supply_reserve 
- smp_max : supply_reserve
- smp_min : supply_capacity, demand_preyear, supply_reserve

#### feature 선택 (최정명님 Code) 
- demand_thiyear : month, weekday, day, temp_mean, temp_max, temp_min, supply_capacity, **supply_ability**, demand_preyear, **supply_reserve**
- smp_mean : **temp_mean**
- smp_max : **day**, **weekday**, **month**, **temp_mean**, **smp_mean**
- smp_min : **temp_mean**, **demand_thisyear**


```python
demand_thisyear_use_col = ['month','weekday', 'day', 'temp_mean', 'temp_max', 'temp_min', 'supply_capacity', 'supply_ability', 'demand_preyear', 'supply_reserve','demand_thisyear']
smp_mean_use_col = ['supply_capacity', 'demand_preyear', 'supply_reserve','smp_mean']
smp_max_use_col = ['supply_reserve','smp_max']
smp_min_use_col = ['supply_capacity', 'demand_preyear', 'supply_reserve','smp_min']
```

#### Light GBM과 파라미터 튜닝 이용하여 모델 구축 (별도 Study 필요)


```python
params1 = {
    'objective':'mae',
    'feature_fraction':0.1,
}


params2 = {
    'objective':'mae',
}

params3= {
    'objective':'mse',
    'feature_fraction':0.1,
}

params4= {
    'objective':'mse',
}


def TRAIN_lgbm(params, X_train_, y_train_, X_valid_, y_valid_, verbose=0):
    train_data = lgb.Dataset(X_train_, y_train_)
    valid_data = lgb.Dataset(X_valid_, y_valid_)
    model = lgb.train(params, train_data, 100000, (train_data, valid_data), verbose_eval=verbose, early_stopping_roubnds=100)
    return model
```

# 5. 모델 학습 및 검증

# 6. 모델 학습 및 검증


```python

```


```python

```
